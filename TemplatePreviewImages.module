<?php

/**
 * Template Preview Images
 * Copyright (C) 2014 by Bernhard Baumrock
 * Available for use under the MIT License
 *
 * ProcessWire 2.x 
 * Copyright (C) 2014 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class TemplatePreviewImages extends WireData implements Module {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {

        return array(
            'title' => 'Template Preview Images', 
            'version' => 2, 
            'summary' => 'Show Preview Images for selectable Templates',
            'requires' => 'ProcessWire>=2.5.5',
            'href' => 'https://processwire.com/talk/topic/11252-module-templatepreviewimages/',
            'singular' => true,
            'autoload' => 'template=admin',
            'icon' => 'cubes', 
            );
    }

    /**
     * Initialize the module
     */
    public function init() {
        $this->addHookAfter('InputfieldSelect::render', $this, 'showTemplatePreviewImages');
    }


    /**
     * show preview images for template select input
     */
    public function showTemplatePreviewImages($event) {

        $field = $event->object;
        if($field->name == 'template') {

            // version number
            $v = $this->getModuleInfo()['version'];

            // add styles and scripts
            $this->config->scripts->add($this->config->urls->siteModules . $this->className . '/image-picker/image-picker.min.js?v=' . $v);
            $this->config->styles->add($this->config->urls->siteModules . $this->className . '/image-picker/image-picker.css?v=' . $v);
            

            // modify markup
            $out = '<select id="template" name="template" class="required image-picker show-labels show-html">';
            foreach($field->options as $key => $val) {
                // get template from current option
                $tpl = wire('templates')->get($key);

                // prepare image source
                $src = $this->config->urls->templates . $this->className . '/' . $tpl->name . '.png';
                if(!is_file($this->config->paths->root . ltrim($src, '/'))) $src = $this->config->urls->siteModules . $this->className . '/placeholder.png';

                // make option markup
                $out .= '<option data-img-src="' . $src . '" value="' . $key . '">' . (($tpl->label) ? $tpl->label : $tpl->name) . '</option>';
            }
            $out .= '</select><script>$("select.image-picker").imagepicker({show_label: true})</script>';

            // resize images
            $out .= '<script>$("ul .thumbnails.image_picker_selector img").attr("height", "' . $this->height . '").attr("width", "' . $this->width . '");</script>';

            $event->return = $out;
        }
    }

    /**
     * Create the Thumbnails folder
     *
     */

    public function ___install() {
        $folder = $this->config->paths->templates . $this->className;
        if (!is_dir($folder)) {
            wireMkdir($folder);
            $this->message(sprintf($this->_("We created the folder /site/templates/%s/"), $this->className));
        }
    }

    /**
     * Uninstall
     *
     */
    public function ___uninstall() {
        if (is_dir($this->config->paths->templates . $this->className)) {
            $this->message(sprintf($this->_("You may remove the folder /site/templates/%s/ manually."), $this->className));
        }
    }

}
